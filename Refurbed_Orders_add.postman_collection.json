{
	"info": {
		"_postman_id": "55358d4f-6132-4024-82c2-73283a158f79",
		"name": "Refurbed_Orders_add",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15975788"
	},
	"item": [
		{
			"name": "refurbed",
			"item": [
				{
					"name": "New_refur_orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json().orders;\r",
									"const orderid = response.map(orders => orders.id);\r",
									"pm.variables.set('orderid', orderid);\r",
									"console.log(orderid)\r",
									"if ( responseCode.code == 200 && orderid != \"\") {\r",
									"   postman.setNextRequest('Single Order');\r",
									"   console.log('orders ok')\r",
									"} else {\r",
									"     setTimeout(() => {}, 3600000); \r",
									"postman.setNextRequest('New_refur_orders');\r",
									"console.log('Cant got and stop / not any news order')\r",
									"}\r",
									"\r",
									"  //setTimeout(() => {}, 15000); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "Plain e01e77cd-899f-4964-a44f-ec603ab62d17",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"filter\":{\r\n        \"state\": {\r\n      \"any_of\": [\r\n        \"NEW\"\r\n      ]\r\n}\r\n}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.refurbed.com/refb.merchant.v1.OrderService/ListOrders",
							"protocol": "https",
							"host": [
								"api",
								"refurbed",
								"com"
							],
							"path": [
								"refb.merchant.v1.OrderService",
								"ListOrders"
							]
						},
						"description": "Known errors:\n- UNAUTHENTICATED\n  - when no authorization header is sent\n  - when authorization header is malformed or invalid\n- PERMISSION_DENIED\n  - when the authorized user does not have permissions for this operation\n- INVALID_ARGUMENT\n  - when pagination limit is too large (>100)\n  - when both \"ending_before\" and \"starting_after\" are specified in pagination"
					},
					"response": [
						{
							"name": "A successful response.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "null",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/refb.merchant.v1.OrderService/ListOrders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"refb.merchant.v1.OrderService",
										"ListOrders"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "null"
						},
						{
							"name": "An unexpected error response.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "null",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/refb.merchant.v1.OrderService/ListOrders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"refb.merchant.v1.OrderService",
										"ListOrders"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": -48885912,\n  \"message\": \"sint et\",\n  \"details\": [\n    {\n      \"@type\": \"velit\",\n      \"in_e9\": {},\n      \"dolore_9_1\": {}\n    },\n    {\n      \"@type\": \"mollit\",\n      \"exercitation_9\": {}\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Single Order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const orderid = pm.variables.get('orderid')\r",
									"if (orderid == ''){\r",
									"    console.log('New_refur_orders Chech agian')\r",
									"    setTimeout(() => {}, 3600000);\r",
									"    postman.setNextRequest('New_refur_orders')\r",
									"} else {\r",
									"\r",
									"pm.variables.set('USEorderid', orderid.shift());\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const order_id = pm.response.json().order.id\r",
									"\r",
									"const item_id = pm.response.json().order.items[0].id\r",
									"\r",
									"const price = pm.response.json().order.items[0].total_paid\r",
									"\r",
									"const first_name = pm.response.json().order.shipping_address.first_name\r",
									"\r",
									"\r",
									"const last_name = pm.response.json().order.shipping_address.family_name\r",
									"\r",
									"\r",
									"const street = pm.response.json().order.shipping_address.house_no\r",
									"\r",
									"\r",
									"const street2 = pm.response.json().order.shipping_address.street_name\r",
									"\r",
									"\r",
									"const postal_code = pm.response.json().order.shipping_address.post_code\r",
									"\r",
									"\r",
									"const country = pm.response.json().order.shipping_address.country_code\r",
									"\r",
									"\r",
									"const city = pm.response.json().order.shipping_address.town\r",
									"\r",
									"\r",
									"const phone = pm.response.json().order.shipping_address.phone_number\r",
									"\r",
									"\r",
									"const email = pm.response.json().order.customer_email\r",
									"\r",
									"\r",
									"const listing = pm.response.json().order.items[0].sku\r",
									"\r",
									"const shipping_id = pm.response.json().order.items[0].offer_data.shipping_profile_id ;\r",
									"\r",
									"\r",
									"pm.variables.set('order_id', order_id)\r",
									"pm.variables.set('first_name', first_name)\r",
									"pm.variables.set('last_name', last_name)\r",
									"pm.variables.set('street', street)\r",
									"pm.variables.set('street2',street2)\r",
									"pm.variables.set('postal_code', postal_code)\r",
									"pm.variables.set('country', country)\r",
									"pm.variables.set('city', city)\r",
									"pm.variables.set('phone', phone)\r",
									"pm.variables.set('email', email)\r",
									"pm.variables.set('price', parseInt(price))\r",
									"pm.variables.set('listing', listing)\r",
									"pm.variables.set('item_id', item_id)\r",
									"pm.variables.set('shipping_id', shipping_id)\r",
									"  //setTimeout(() => {}, 15000); \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "Plain e01e77cd-899f-4964-a44f-ec603ab62d17",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{USEorderid}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.refurbed.com/refb.merchant.v1.OrderService/GetOrder",
							"protocol": "https",
							"host": [
								"api",
								"refurbed",
								"com"
							],
							"path": [
								"refb.merchant.v1.OrderService",
								"GetOrder"
							]
						},
						"description": "Known errors:\n- UNAUTHENTICATED\n  - when no authorization header is sent\n  - when authorization header is malformed or invalid\n- PERMISSION_DENIED\n  - when the authorized user does not have permissions for this operation\n- INVALID_ARGUMENT\n  - when pagination limit is too large (>100)\n  - when both \"ending_before\" and \"starting_after\" are specified in pagination"
					},
					"response": [
						{
							"name": "A successful response.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "null",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/refb.merchant.v1.OrderService/ListOrders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"refb.merchant.v1.OrderService",
										"ListOrders"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "null"
						},
						{
							"name": "An unexpected error response.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "null",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/refb.merchant.v1.OrderService/ListOrders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"refb.merchant.v1.OrderService",
										"ListOrders"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": -48885912,\n  \"message\": \"sint et\",\n  \"details\": [\n    {\n      \"@type\": \"velit\",\n      \"in_e9\": {},\n      \"dolore_9_1\": {}\n    },\n    {\n      \"@type\": \"mollit\",\n      \"exercitation_9\": {}\n    }\n  ]\n}"
						}
					]
				}
			],
			"auth": {
				"type": "apikey"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "SGOPWEDO",
			"item": [
				{
					"name": "all Stock",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const listing = pm.variables.get('listing');",
									"pm.variables.set('listing', listing);",
									"console.log(listing)",
									"const orderid = pm.variables.get('orderid');",
									"console.log(orderid)",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const get_single_id = pm.variables.get('order_id');\r",
									"\r",
									"const listing = pm.variables.get('listing');\r",
									"pm.variables.set('listing', listing);\r",
									"\r",
									"const listings = pm.response.json()\r",
									"\r",
									"\r",
									"const obj = listings;\r",
									"reference2 = listing;\r",
									"\r",
									"for (n in obj) {\r",
									"    if (obj[n].reference2 == reference2 && obj[n].atp > 0 ){\r",
									"        master_atp = obj[n].atp\r",
									"        sdw_model_name = obj[n].description\r",
									"        break;\r",
									"    }\r",
									"    \r",
									"     master_atp =\"\"\r",
									"     sdw_model_name=\"\"\r",
									"    }\r",
									" \r",
									"        console.log(master_atp)\r",
									"pm.variables.set('sdw_model_name',sdw_model_name)\r",
									"        if (master_atp <= 0)  {\r",
									"              pm.sendRequest({\r",
									"    url: 'https://api.appsheet.com/api/v2/apps/6aec3910-fe2b-4d41-840e-aee105698fe3/tables/Order_Notice/Add',\r",
									"    method: 'POST',\r",
									"    header:   {'Content-Type' : 'application/json',\r",
									"               'applicationAccessKey': 'V2-mwTj5-nvH7J-6sv08-6yfrG-OSs2H-jQEOe-sWbY9-mZ5ha'},\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: {\r",
									"  \"Action\": \"Add\",\r",
									"  \"Properties\": {\r",
									"    \"Locale\": \"en-US\",\r",
									"    \"Location\": \"47.623098, -122.330184\",\r",
									"    \"Timezone\": \"Pacific Standard Time\",\r",
									"    \"UserSettings\": {\r",
									"      \"Option 1\": \"value1\",\r",
									"      \"Option 2\": \"value2\"\r",
									"    }\r",
									"  },\r",
									"  \"Rows\": [{\r",
									"\"order_id\" : get_single_id,\r",
									"\"Note\": \"This Over _sell \"+\"  \" + listing+ \"  this refur order need ask the Buyer change to other: / some Stock watting Book in /\"\r",
									"  }\r",
									"  ]\r",
									"} \r",
									"    }\r",
									"}, function (err, res) {\r",
									"    console.log(res);\r",
									"});\r",
									"            console.log(listing)\r",
									"            console.log ('no stock') \r",
									"            postman.setNextRequest('Single Order'); \r",
									"        } else\r",
									"        {\r",
									"           postman.setNextRequest('add order');  \r",
									"        }\r",
									"\r",
									"\r",
									"          setTimeout(() => {}, 15000); \r",
									"\r",
									"          if (get_single_id == undefined)\r",
									"          {\r",
									"               setTimeout(() => {}, 150000); \r",
									"          }\r",
									"//    pm.variables.set('sku', sku)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth",
									"value": "{{authJson}}",
									"type": "text"
								},
								{
									"key": "data",
									"value": "{\n\"reference\":\"{{listing}}\"\n}",
									"type": "text"
								},
								{
									"key": "",
									"value": "{”",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://admin.shopwedo.com/api/getStock",
							"protocol": "https",
							"host": [
								"admin",
								"shopwedo",
								"com"
							],
							"path": [
								"api",
								"getStock"
							],
							"query": [
								{
									"key": "page",
									"value": "2",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "add order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const order_id = pm.variables.get('order_id');",
									"pm.variables.set('Useorder_id', order_id );",
									"const orderlines = pm.variables.get('orderlines');",
									"pm.variables.set('Useorderlines', orderlines );",
									"const first_name = pm.variables.get('first_name');",
									"pm.variables.set('Usefirst_name', first_name );",
									"const last_name = pm.variables.get('last_name');",
									"pm.variables.set('Uselast_name', last_name );",
									"const company = pm.variables.get('company');",
									"pm.variables.set('Usecompany', company );",
									"const street = pm.variables.get('street');",
									"pm.variables.set('Usestreet', street );",
									"const street2 = pm.variables.get('street2');",
									"pm.variables.set('Usestreet2', street2 );",
									"const postal_code = pm.variables.get('postal_code');",
									"pm.variables.set('Usepostal', postal_code );",
									"const country = pm.variables.get('country');",
									"pm.variables.set('Usecountry', country );",
									"const city = pm.variables.get('city');",
									"pm.variables.set('Usecity', city );",
									"const phone = pm.variables.get('phone');",
									"pm.variables.set('Usephone', phone );",
									"const email = pm.variables.get('email');",
									"pm.variables.set('Useemail', email );",
									"const price = pm.variables.get('price');",
									"pm.variables.set('Useprice', price );",
									"const listing = pm.variables.get('listing');",
									"pm.variables.set('Uselisting', listing );",
									"const quantity = pm.variables.get('quantity');",
									"pm.variables.set('Usequantity', quantity );",
									"const shipping_id = pm.variables.get('shipping_id');",
									"console.log(shipping_id)",
									"",
									"if ( shipping_id == 754 && price <= 800  )",
									"{",
									"    pm.variables.set('shipper', \"ups\" );",
									"}",
									"if ( shipping_id == 1001 && price <= 800  )",
									"{",
									"    pm.variables.set('shipper', \"dhlexpress\" );",
									"}",
									"else {",
									"     pm.variables.set('shipper', \"dhlexpress\" );",
									"}",
									"",
									"",
									"",
									"",
									"",
									"",
									"   if (street2 != null) {",
									"pm.variables.set('Usestreet2', \",\"+street2 );",
									"   } else {",
									"pm.variables.set('Usestreet2', '' );",
									"  }",
									"",
									"  ",
									"item = [{",
									"            skuType: \"reference\",",
									"            sku: listing,",
									"            amount:1,",
									"            price:price",
									"        },",
									"        {",
									"        skuType: \"reference\",",
									"            sku: \"002204\",",
									"            amount:1,",
									"            price:2",
									"}",
									"]",
									"",
									"pm.variables.get('sdw_model_name')",
									"if (sdw_model_name.includes(\"EUS\")  === true &&  ( sdw_model_name.includes(\"iPad 9\")  === true || sdw_model_name.includes(\"iPad 8\") === true) ){",
									"item = [{",
									"            skuType: \"reference\",",
									"            sku: listing,",
									"            amount:1,",
									"            price:price",
									"        },",
									"        {",
									"        skuType: \"reference\",",
									"            sku: \"002479\",",
									"            amount:1,",
									"            price:2",
									"}",
									"]",
									"}",
									"if (sdw_model_name.includes(\"EUS\")  === true &&  sdw_model_name.includes(\"iPad 7\")  === true ){",
									"item = [{",
									"            skuType: \"reference\",",
									"            sku: listing,",
									"            amount:1,",
									"            price:price",
									"        },",
									"        {",
									"        skuType: \"reference\",",
									"            sku: \"002351\",",
									"            amount:1,",
									"            price:2",
									"}",
									"]",
									"}",
									"if (sdw_model_name.includes(\"EUS\")  === true && (sdw_model_name.includes(\"iPad Pro\") === true || sdw_model_name.includes(\"iPad Air 4th\")  === true || sdw_model_name.includes(\"iPad Air 5th\")  === true)){",
									"item = [{",
									"            skuType: \"reference\",",
									"            sku: listing,",
									"            amount:1,",
									"            price:price",
									"        },",
									"        {",
									"        skuType: \"reference\",",
									"            sku: \"002478\",",
									"            amount:1,",
									"            price:2",
									"}",
									"]",
									"}",
									"",
									"",
									"if (sdw_model_name.includes(\"EUS\")  === true && ( sdw_model_name.includes(\"iPhone 12\")  === true ||  sdw_model_name.includes(\"iPhone 13\")  === true ||  sdw_model_name.includes(\"iPhone 14\")  === true )){",
									"item = [{",
									"            skuType: \"reference\",",
									"            sku: listing,",
									"            amount:1,",
									"            price:price",
									"        },",
									"        {",
									"        skuType: \"reference\",",
									"            sku: \"002331\",",
									"            amount:1,",
									"            price:2",
									"}",
									"]",
									"} ",
									"",
									"if (sdw_model_name.includes(\"EUS\")  !== true)",
									"{",
									"    item = [{",
									"            skuType: \"reference\",",
									"            sku: listing,",
									"            amount:1,",
									"            price:price",
									"        }",
									"    ]",
									"}",
									"if (sdw_model_name.includes(\"EUS\")  == true && ( sdw_model_name.includes(\"iPhone 11\")  == true ||  sdw_model_name.includes(\"iPhone XR\"))){",
									"item = [{",
									"            skuType: \"reference\",",
									"            sku: listing,",
									"            amount:1,",
									"            price:price",
									"        },",
									"        {",
									"        skuType: \"reference\",",
									"            sku: \"002331\",",
									"            amount:1,",
									"            price:2",
									"},",
									"{",
									"        skuType: \"reference\",",
									"            sku: \"002510\",",
									"            amount:1,",
									"            price:2",
									"}",
									"",
									"]",
									"}",
									"",
									" pm.variables.set('item', JSON.stringify(item) );       ",
									"   setTimeout(() => {}, 15000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"if (responseCode.code !== 201) {",
									"postman.setNextRequest('Single Order'); ",
									"} else {",
									"postman.setNextRequest('refurbed_order_ Accepted');",
									"console.log(\"to Accepted order refurbed\")",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"maxRedirects": 100
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth",
									"value": "{{authJson}}",
									"type": "text"
								},
								{
									"key": "data",
									"value": "{\n    \"external_order_id\": \"{{Useorder_id}}\",\n    \"external_order_reference\": \"{{Useorder_id}}\",\n    \"release\": \"y\",\n    \"shipping_method\":\"ship\",\n     \"shipping_company\": \"dhlexpress\",\n    \"shipping_address\": {\n\"firstname\":\"{{Usefirst_name}}\",\n\"lastname\":\"{{Uselast_name}}\",\n        \"company\": \"{{Usecompany}}\",\n        \"street\": \"{{Usestreet}}{{Usestreet2}}\",\n        \"box\": \"\",\n        \"zip\": \"{{Usepostal}}\",\n        \"city\": \"{{Usecity}}\",\n        \"country_iso2\": \"{{Usecountry}}\",\n        \"phone\": \"{{Usephone}}\",\n        \"email\": \"{{Useemail}}\"\n    },\n    \"items\": \n        {{item}}\n    \n}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://admin.shopwedo.com/api/createOrder",
							"protocol": "https",
							"host": [
								"admin",
								"shopwedo",
								"com"
							],
							"path": [
								"api",
								"createOrder"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "refurbed_order_ Accepted",
			"item": [
				{
					"name": "refurbed_order_ Accepted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code == 200) {\r",
									"postman.setNextRequest('Single Order')\r",
									"} else {\r",
									"    postman.setNextRequest(null)\r",
									"}\r",
									"  setTimeout(() => {}, 15000); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "Plain e01e77cd-899f-4964-a44f-ec603ab62d17",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{item_id}}\",\r\n  \"state\": \"ACCEPTED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.refurbed.com/refb.merchant.v1.OrderItemService/UpdateOrderItemState",
							"protocol": "https",
							"host": [
								"api",
								"refurbed",
								"com"
							],
							"path": [
								"refb.merchant.v1.OrderItemService",
								"UpdateOrderItemState"
							]
						},
						"description": "Known errors:\n- UNAUTHENTICATED\n  - when no authorization header is sent\n  - when authorization header is malformed or invalid\n- PERMISSION_DENIED\n  - when the authorized user does not have permissions for this operation\n- INVALID_ARGUMENT\n  - when pagination limit is too large (>100)\n  - when both \"ending_before\" and \"starting_after\" are specified in pagination"
					},
					"response": [
						{
							"name": "A successful response.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "null",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/refb.merchant.v1.OrderService/ListOrders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"refb.merchant.v1.OrderService",
										"ListOrders"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "null"
						},
						{
							"name": "An unexpected error response.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "null",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/refb.merchant.v1.OrderService/ListOrders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"refb.merchant.v1.OrderService",
										"ListOrders"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": -48885912,\n  \"message\": \"sint et\",\n  \"details\": [\n    {\n      \"@type\": \"velit\",\n      \"in_e9\": {},\n      \"dolore_9_1\": {}\n    },\n    {\n      \"@type\": \"mollit\",\n      \"exercitation_9\": {}\n    }\n  ]\n}"
						}
					]
				}
			],
			"auth": {
				"type": "apikey"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// pm.variables.set(key,value);",
					"// pm.variables.get(key)",
					"Date.prototype.getUnixTime = function() { return this.getTime()/1000|0 };",
					"",
					"",
					"var\tshopid = pm.variables.get('shopid'),",
					"\tshopkey = pm.variables.get('shopkey'),",
					"\ttimestamp = ((new Date().getTime())/1000), ",
					"\tsalt = CryptoJS.lib.WordArray.random(128 / 8);",
					"\t",
					"//A unique hash HMAC SHA-512 encrypted string of the concatenation of the shop ID, shop KEY, timestamp and salt.",
					"var tokenInput = `${shopid}${shopkey}${timestamp}${salt}`;",,
					"",
					"var token = CryptoJS.HmacSHA512(tokenInput, shopkey).toString();",
					"",
					"var authJson = JSON.stringify({",
					"",
					"    'shopid' : `${shopid}`,",
					"",
					"    'timestamp' : `${timestamp}`,",
					"",
					"    'salt' : `${salt}`,",
					"",
					"    'token' : `${token}`",
					"",
					"});",
					"pm.variables.set('authJson', authJson);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "shopkey",
			"value": "9q7qDKnCX+XHtdAka96OTm3SEfyW/0gw/5HYQJClmtBet4grGl1/W5xuGxmuSGM2B/R5OADgmn+z+4GnkBtRapMqxRaOcpfqpMeLPDO4qGAlNmVCzXyFNbYHPA4ORmRHBo5pnRKmVtamFPjJh3BLdaSsYCD6IxckVJb8f6N10Kc=",
			"type": "string"
		},
		{
			"key": "shopid",
			"value": "11025",
			"type": "string"
		},
		{
			"key": "authJson",
			"value": "{{shopkey}}{{shopid}}",
			"type": "string"
		},
		{
			"key": "postman-api-key",
			"value": "PMAK-626a9f5c640bd1199309cfc1-b232fcb5fe0616f6fcc8243b281cae8c70",
			"type": "string",
			"disabled": true
		}
	]
}